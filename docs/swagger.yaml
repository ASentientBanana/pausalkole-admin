basePath: /api/v1
definitions:
  dto.LoginDto:
    properties:
      email:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  dto.RegisterDTO:
    properties:
      confirm_password:
        minLength: 8
        type: string
      email:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - confirm_password
    - password
    type: object
  dto.UserResponse:
    properties:
      email:
        type: string
      id:
        type: string
    type: object
  dto.UserResponseDto:
    properties:
      token:
        type: string
      user:
        $ref: '#/definitions/dto.UserResponse'
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is a sample server.
  title: Example API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login existing user by email and password
      parameters:
      - description: User credentials
        in: body
        name: credentials
        schema:
          $ref: '#/definitions/dto.LoginDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserResponseDto'
        "400":
          description: Bad Request
      summary: Login
      tags:
      - Auth
  /user/register:
    post:
      consumes:
      - application/json
      description: Register user
      parameters:
      - description: User credentials
        in: body
        name: credentials
        schema:
          $ref: '#/definitions/dto.RegisterDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserResponseDto'
        "400":
          description: Bad Request
      summary: Register
      tags:
      - User
swagger: "2.0"
